import { defineComponent, h, mergeProps, openBlock, createElementBlock } from "vue";
import { icon } from "@fortawesome/fontawesome-svg-core";
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
function convertTag(input, attrs) {
  return h(input.tag, mergeProps(input.attributes, attrs), input.children ? input.children.map((child) => convertTag(child)) : []);
}
const _sfc_main = defineComponent({
  name: "ac-icon",
  props: {
    variant: {
      type: String,
      validator: (t) => ["regular", "solid", "light", "brands", "duotone"].includes(t)
    },
    regular: Boolean,
    solid: Boolean,
    light: Boolean,
    brands: Boolean,
    duotone: Boolean,
    fixedWidth: Boolean,
    spin: Boolean,
    pulse: Boolean,
    size: String,
    transform: String
  },
  setup(props, { slots, attrs }) {
    return () => {
      let prefix;
      if (props.regular || props.variant === "regular") {
        prefix = "far";
      } else if (props.solid || props.variant === "solid") {
        prefix = "fas";
      } else if (props.light || props.variant === "light") {
        prefix = "fal";
      } else if (props.brands || props.variant === "brands") {
        prefix = "fab";
      } else if (props.duotone || props.variant === "duotone") {
        prefix = "fad";
      }
      if (!prefix) {
        throw new Error(`Missing icon prefix configuration. Pass one of {solid,regular,light,brands,duotone} props.`);
      }
      let classes = [];
      if (props.spin) {
        classes.push("fa-spin");
      }
      if (props.pulse) {
        classes.push("fa-pulse");
      }
      if (props.fixedWidth) {
        classes.push("fa-fw");
      }
      if (props.size) {
        classes.push(`fa-${props.size}`);
      }
      let def = slots.default && slots.default()[0].children;
      if (!def || typeof def !== "string") {
        throw new Error(`Empty icon content. Content of the tag should contain the icon name.`);
      }
      let iconName = def.trim();
      let icon$1 = icon({ prefix, iconName }, { classes });
      if (!icon$1) {
        throw new Error(`could not find icon: ${prefix}-${iconName}`);
      }
      return convertTag(icon$1.abstract[0], attrs);
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("template");
}
var Icon = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/home/ernesto/projects/github/fa6-icon/src/components/Icon.vue"]]);
export { Icon };
//# sourceMappingURL=fa6-icon.es.js.map
